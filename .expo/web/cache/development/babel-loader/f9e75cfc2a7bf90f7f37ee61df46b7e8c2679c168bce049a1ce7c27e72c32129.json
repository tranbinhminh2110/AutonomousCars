{"ast":null,"code":"import { NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useLinkTo from \"./useLinkTo\";\nexport default function useLinkProps(_ref) {\n  var to = _ref.to,\n    action = _ref.action;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linkTo = useLinkTo();\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n    var shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  return {\n    href: to,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"names":["NavigationContainerRefContext","NavigationHelpersContext","React","Platform","useLinkTo","useLinkProps","_ref","to","action","root","useContext","navigation","linkTo","onPress","e","_e$currentTarget","shouldHandle","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","target","preventDefault","dispatch","Error","href","accessibilityRole"],"sources":["C:\\Users\\AS\\Downloads\\appautocar (1)\\appautocar\\node_modules\\@react-navigation\\native\\lib\\module\\useLinkProps.tsx"],"sourcesContent":["import {\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"AAAA,SAEEA,6BAFF,EAGEC,wBAHF,QAIO,wBAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,QAAA;AAGA,OAAOC,SAAP;AAaA,eAAe,SAASC,YAATA,CAAAC,IAAA,EAEqB;EAAA,IAAhCC,EAAF,GAAAD,IAAA,CAAEC,EAAF;IAAMC,MAAA,GAAAF,IAAA,CAAAE,MAAA;EACN,IAAMC,IAAI,GAAGP,KAAK,CAACQ,UAAN,CAAiBV,6BAAjB,CAAb;EACA,IAAMW,UAAU,GAAGT,KAAK,CAACQ,UAAN,CAAiBT,wBAAjB,CAAnB;EACA,IAAMW,MAAM,GAAGR,SAAS,EAAxB;EAEA,IAAMS,OAAO,GACX,SADIA,OAAOA,CACXC,CADc,EAEX;IAAA,IAAAC,gBAAA;IACH,IAAIC,YAAY,GAAG,KAAnB;IAEA,IAAIb,QAAQ,CAACc,EAAT,KAAgB,KAAhB,IAAyB,CAACH,CAA9B,EAAiC;MAC/BE,YAAY,GAAGF,CAAC,GAAG,CAACA,CAAC,CAACI,gBAAN,GAAyB,IAAzC;IACD,CAFD,MAEO,IACL,CAACJ,CAAC,CAACI,gBAAH,IAEA,EAAEJ,CAAC,CAACK,OAAF,IAAaL,CAAC,CAACM,MAAf,IAAyBN,CAAC,CAACO,OAA3B,IAAsCP,CAAC,CAACQ,QAA1C,CAFA,KAICR,CAAC,CAACS,MAAF,IAAY,IAAZ,IAAoBT,CAAC,CAACS,MAAF,KAAa,CAJlC,KAMA,CAACC,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,EAA8BC,QAA9B,EAAAV,gBAAA,GAAuCD,CAAC,CAACY,aAAzC,cAAAX,gBAAA,uBAAuCA,gBAAA,CAAiBY,MAAxD,CAPK,EAQL;MACAb,CAAC,CAACc,cAAF;MACAZ,YAAY,GAAG,IAAf;IACD;IAED,IAAIA,YAAJ,EAAkB;MAChB,IAAIR,MAAJ,EAAY;QACV,IAAIG,UAAJ,EAAgB;UACdA,UAAU,CAACkB,QAAX,CAAoBrB,MAApB;QACD,CAFD,MAEO,IAAIC,IAAJ,EAAU;UACfA,IAAI,CAACoB,QAAL,CAAcrB,MAAd;QACD,CAFM,MAEA;UACL,MAAM,IAAIsB,KAAJ,CACJ,kFADI,CAAN;QAGD;MACF,CAVD,MAUO;QACLlB,MAAM,CAACL,EAAD,CAAN;MACD;IACF;EACF,CAnCD;EAqCA,OAAO;IACLwB,IAAI,EAAExB,EADD;IAELyB,iBAAiB,EAAE,MAFd;IAGLnB,OAAA,EAAAA;EAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module","externalDependencies":[]}